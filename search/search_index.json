{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to RISK Network Documentation","text":"<p>RISK (Regional Inference of Significant Kinships) is a scalable, modular tool for annotating and visualizing biological networks. It combines clustering, statistical overrepresentation, and clean publication-ready visualizations\u2014all in one streamlined package.</p> <p>Whether you're new to RISK or just looking to fine-tune your workflow, these docs walk you through setup, usage, and advanced features.</p> <p></p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Start here to set up and understand the basics:</p> <ul> <li>0. Intro: Overview and key concepts</li> <li>1. Installation: Install RISK on your system</li> </ul> <p>You can also explore the tutorial notebook:</p> <ul> <li>View Quickstart Notebook (HTML)</li> <li>Download Quickstart Notebook (.ipynb)</li> </ul>"},{"location":"#core-features","title":"Core Features","text":"<ul> <li>2. Network Input</li> <li>3. Annotations</li> <li>4. Statistics</li> <li>5. Load &amp; Analyze Graph</li> <li>6. Visualization</li> </ul>"},{"location":"#advanced-use","title":"Advanced Use","text":"<ul> <li>7. Advanced Plotting</li> <li>8. Parameter Export</li> </ul> <p>If you're working in a Jupyter notebook, check out quickstart.ipynb for a fully interactive example. Or view the static HTML version at quickstart.html.</p> <p>Contributions welcome on GitHub. You can also explore the RISK source code on GitHub.</p>"},{"location":"0_intro/","title":"Introduction to RISK","text":"<p>RISK (Regional Inference of Significant Kinships) is a next-generation tool for biological network annotation and visualization. It integrates advanced clustering, statistically rigorous overrepresentation analysis, and high-resolution plotting to uncover structured relationships in complex networks.</p> <p>RISK is designed to:</p> <ul> <li>Identify biologically meaningful modules in large-scale networks</li> <li>Perform fast and flexible overrepresentation testing</li> <li>Generate publication-ready visualizations</li> <li>Scale to hundreds of thousands of edges on standard hardware</li> <li>Generalize beyond biology to interdisciplinary networks</li> </ul>"},{"location":"0_intro/#what-makes-risk-different","title":"What makes RISK different?","text":"Feature RISK Clustering Louvain, Leiden, Markov, Spinglass, etc. Statistics Permutation, hypergeometric, chi-squared, z, etc. File Formats NetworkX, Cytoscape (.cys, .cyjs), GPickle Annotations JSON, CSV, Excel, TSV, Python dict Scalability Networks with 500k+ edges on standard hardware Visual Output High-resolution SVG, PNG, PDF, etc. Beyond Biology Used on physics citation network (Supp. Fig. S9)"},{"location":"0_intro/#example-applications","title":"Example Applications","text":"<ul> <li>Functional module identification in yeast PPI and GI networks</li> <li>Synthetic lethality pathway mapping</li> <li>Drug-target prediction via annotation overrepresentation</li> <li>Cross-domain network exploration in physics and other disciplines</li> </ul> <p>For more examples, see 7. Advanced Plotting.</p>"},{"location":"0_intro/#full-interactive-example","title":"Full Interactive Example","text":"<p>If you prefer an interactive, all-in-one workflow, see quickstart.ipynb. It walks through all key steps\u2014from loading a network to generating publication-quality figures\u2014in a single notebook.</p> <p>The notebook focuses on a curated yeast PPI network (Michaelis et al., 2023), filtered to retain proteins with six or more interactions (2,059 nodes, 27,690 edges). Throughout the tutorial, we showcase:</p> <ul> <li>Network clustering and module detection</li> <li>Annotation-based overrepresentation analysis</li> <li>Interactive and advanced visualization features</li> <li>Exporting parameters and reproducibility tools</li> </ul> <p>This notebook complements the Markdown documentation in this repository, but does not follow a strict 1-to-1 mapping. Use it for end-to-end examples and contextual guidance. The notebook covers the following topics, each reflected in this documentation:</p> <ol> <li>Installing RISK</li> <li>Importing RISK</li> <li>Initializing RISK</li> <li>Network Input</li> <li>Annotations</li> <li>Statistical Tests</li> <li>Graph Analysis</li> <li>Visualization</li> <li>Parameters</li> <li>Advanced Plotting</li> </ol>"},{"location":"0_intro/#getting-started","title":"Getting Started","text":"<p>Continue to 1. Installation to install RISK and set up your environment.</p>"},{"location":"1_installation/","title":"Installation","text":"<p>To get started, install the <code>risk-network</code> package using pip:</p> <pre><code>pip install risk-network --upgrade\n</code></pre> <p>To install from source:</p> <pre><code>git clone https://github.com/riskportal/network.git\ncd network\npip install .\n</code></pre>"},{"location":"1_installation/#1-importing-risk","title":"1. Importing RISK","text":"<p>After installing, verify the installation and import the package:</p> <pre><code>import risk\nprint(risk.__version__)\n</code></pre> <p>To use RISK's core functionalities:</p> <pre><code>from risk import RISK\n</code></pre> <p>If using a Jupyter notebook, enable inline plotting:</p> <pre><code>%matplotlib inline\n</code></pre>"},{"location":"1_installation/#2-initializing-risk","title":"2. Initializing RISK","text":"<p>Create a <code>RISK</code> object to access network analysis functions:</p> <pre><code>risk = RISK(verbose=True)\n</code></pre> <ul> <li><code>verbose=True</code> enables log messages in the console.</li> </ul>"},{"location":"1_installation/#next-step","title":"Next Step","text":"<p>Continue to 2. Network Input to import your first graph.</p>"},{"location":"2_network_input/","title":"Loading a Network","text":"<p>RISK includes dedicated loader functions for multiple network formats. Each returns a standardized <code>networkx</code> graph object for downstream analysis.</p>"},{"location":"2_network_input/#supported-input-formats","title":"Supported Input Formats","text":"Format Function <code>.cys</code> <code>load_cytoscape_network()</code> <code>.cyjs</code> <code>load_cytoscape_json_network()</code> <code>.gpickle</code> <code>load_gpickle_network()</code> <code>NetworkX</code> <code>load_networkx_network()</code> <p>Each loader supports optional spherical projection, depth tuning, and node filtering.</p>"},{"location":"2_network_input/#cytoscape-cys-files","title":"Cytoscape <code>.cys</code> Files","text":"<p>Use this format if you've exported or styled your network in Cytoscape.</p> <pre><code>network = risk.load_cytoscape_network(\n    filepath=\"./data/cytoscape/michaelis_2023.cys\",\n    source_label=\"source\",\n    target_label=\"target\",\n    view_name=\"\",\n    compute_sphere=True,\n    surface_depth=0.1,\n)\n</code></pre> <ul> <li><code>source_label</code>, <code>target_label</code>: Column names for edges</li> <li><code>view_name</code>: Load a specific layout (optional)</li> <li><code>compute_sphere</code>: Project layout onto a 3D sphere</li> <li><code>surface_depth</code>: Controls visual node \"depth\"</li> </ul>"},{"location":"2_network_input/#cytoscape-json-cyjs-files","title":"Cytoscape JSON (<code>.cyjs</code>) Files","text":"<p>Structured network files exported from Cytoscape Web or JS-based tools.</p> <pre><code>network = risk.load_cytoscape_json_network(\n    filepath=\"./data/cyjs/michaelis_2023.cyjs\",\n    source_label=\"source\",\n    target_label=\"target\",\n    compute_sphere=True,\n    surface_depth=0.1,\n    min_edges_per_node=0,\n)\n</code></pre> <ul> <li><code>min_edges_per_node</code>: Filters out sparsely connected nodes</li> </ul>"},{"location":"2_network_input/#gpickle-gpickle-files","title":"GPickle (<code>.gpickle</code>) Files","text":"<p>Fast, native Python serialization of NetworkX graphs.</p> <pre><code>network = risk.load_gpickle_network(\n    filepath=\"./data/gpickle/michaelis_2023.gpickle\",\n    compute_sphere=True,\n    surface_depth=0.1,\n    min_edges_per_node=0,\n)\n</code></pre> <p>Use this for reproducibility and performance when working with saved graphs.</p>"},{"location":"2_network_input/#networkx-graphs","title":"NetworkX Graphs","text":"<p>Load an in-memory NetworkX graph directly.</p> <pre><code>network = risk.load_networkx_network(\n    network=network,\n    compute_sphere=True,\n    surface_depth=0.1,\n    min_edges_per_node=0,\n)\n</code></pre> <p>Useful if you've already constructed a graph using other tools or workflows.</p>"},{"location":"2_network_input/#spherical-projection-and-depth","title":"Spherical Projection and Depth","text":"<p>All formats support these shared preprocessing parameters:</p> <ul> <li><code>compute_sphere=True</code>: Projects nodes from 2D to a 3D spherical layout (Mercator-inspired)</li> <li><code>surface_depth</code>: Push or pull nodes inward/outward to reflect density or importance</li> <li><code>min_edges_per_node</code>: Removes low-degree noise</li> </ul> <p>These features improve layout clarity and biological interpretability.</p>"},{"location":"2_network_input/#next-step","title":"Next Step","text":"<p>Proceed to 3. Annotations to map biological terms onto network nodes.</p>"},{"location":"3_annotations/","title":"Loading and Associating Annotations","text":"<p>Annotations map biological terms to network nodes (e.g., Gene Ontology categories mapping GO terms to genes). RISK supports multiple input formats with dedicated loaders.</p>"},{"location":"3_annotations/#supported-input-formats","title":"Supported Input Formats","text":"Format Function Example File <code>.json</code> <code>load_json_annotation()</code> <code>go_biological_process.json</code> <code>.csv</code> <code>load_csv_annotation()</code> <code>go_biological_process.csv</code> <code>.tsv</code> <code>load_tsv_annotation()</code> <code>go_biological_process.tsv</code> <code>.xlsx</code>/<code>.xls</code> <code>load_excel_annotation()</code> <code>go_biological_process.xlsx</code> <code>dict</code> <code>load_dict_annotation()</code> Python-loaded JSON <p>Each method also accepts a <code>min_nodes_per_term</code> argument to exclude underpowered annotations.</p>"},{"location":"3_annotations/#json-annotations","title":"JSON Annotations","text":"<pre><code>annotations = risk.load_json_annotation(\n    network=network,\n    filepath=\"./data/json/annotations/go_biological_process.json\",\n    min_nodes_per_term=1,\n)\n</code></pre> <ul> <li>Load term-to-node mappings from a JSON dictionary</li> <li>Ideal for GO annotations exported from standard tools</li> </ul>"},{"location":"3_annotations/#csv-annotations","title":"CSV Annotations","text":"<pre><code>annotations = risk.load_csv_annotation(\n    network=network,\n    filepath=\"./data/csv/annotations/go_biological_process.csv\",\n    label_colname=\"label\",\n    nodes_colname=\"nodes\",\n    nodes_delimiter=\";\",\n    min_nodes_per_term=1,\n)\n</code></pre> <ul> <li>Columns: one for labels, one for semicolon-separated nodes</li> <li>Use for flat structured data</li> </ul>"},{"location":"3_annotations/#tsv-annotations","title":"TSV Annotations","text":"<pre><code>annotations = risk.load_tsv_annotation(\n    network=network,\n    filepath=\"./data/tsv/annotations/go_biological_process.tsv\",\n    label_colname=\"label\",\n    nodes_colname=\"nodes\",\n    nodes_delimiter=\";\",\n    min_nodes_per_term=2,\n)\n</code></pre> <ul> <li>Tab-delimited version of the CSV format</li> </ul>"},{"location":"3_annotations/#excel-annotations","title":"Excel Annotations","text":"<pre><code>annotations = risk.load_excel_annotation(\n    network=network,\n    filepath=\"./data/excel/annotations/go_biological_process.xlsx\",\n    label_colname=\"label\",\n    nodes_colname=\"nodes\",\n    sheet_name=\"Sheet1\",\n    nodes_delimiter=\";\",\n    min_nodes_per_term=1,\n)\n</code></pre> <ul> <li>Specify a sheet name to target structured spreadsheets</li> </ul>"},{"location":"3_annotations/#dictionary-based-annotation","title":"Dictionary-Based Annotation","text":"<p>If you already have a dictionary loaded from another source:</p> <pre><code>import json\n\nwith open(\"./data/json/annotations/go_biological_process.json\") as file:\n    annotations_dict = json.load(file)\n\nannotations = risk.load_dict_annotation(\n    network=network,\n    content=annotations_dict,\n    min_nodes_per_term=1,\n)\n</code></pre> <p>Use this method to work with annotations already in memory.</p>"},{"location":"3_annotations/#next-step","title":"Next Step","text":"<p>Proceed to 4. Statistics to evaluate term overrepresentation.</p>"},{"location":"4_statistics/","title":"Statistical Tests for Annotation Significance","text":"<p>RISK provides six statistical methods for testing overrepresentation or underrepresentation of functional annotations within local network neighborhoods. Each method has different strengths depending on your data size, structure, and goals.</p>"},{"location":"4_statistics/#summary-of-methods","title":"Summary of Methods","text":"Test Speed Best For Permutation \ud83d\udc22 Slow Most robust, no assumptions Hypergeometric \u2696\ufe0f Medium GO/pathway analysis, exact sampling Binomial \u26a1 Fast Binary trials, scalable Chi-squared \u26a1 Fast Contingency tables, large datasets Poisson \u26a1 Fast Rare events, sparse networks Z-score \u26a1 Fast Approximate, fast scanning"},{"location":"4_statistics/#common-parameters","title":"Common Parameters","text":"<p>All methods use a shared API and return a <code>neighborhoods</code> dictionary with per-cluster statistics.</p> Parameter Description <code>network</code> NetworkX graph <code>annotations</code> Annotation dict <code>distance_metric</code> Method(s) for neighborhood detection (e.g., <code>'louvain'</code>) <code>louvain_resolution</code> Resolution for Louvain clustering <code>leiden_resolution</code> Resolution for Leiden clustering <code>fraction_shortest_edges</code> Filter for edge-based subgraphs <code>null_distribution</code> <code>\"network\"</code> or <code>\"annotations\"</code> <code>random_seed</code> Random state for reproducibility"},{"location":"4_statistics/#1-permutation-test","title":"1. Permutation Test","text":"<p>Most robust method. Shuffles graph or annotations to build a null.</p> <pre><code>neighborhoods = risk.load_neighborhoods_by_permutation(\n    network=network,\n    annotations=annotations,\n    distance_metric=\"louvain\",\n    louvain_resolution=10.0,\n    leiden_resolution=1.0,\n    fraction_shortest_edges=0.275,\n    score_metric=\"stdev\",\n    null_distribution=\"network\",\n    num_permutations=1000,\n    random_seed=887,\n    max_workers=1,\n)\n</code></pre>"},{"location":"4_statistics/#2-hypergeometric-test","title":"2. Hypergeometric Test","text":"<p>Exact test based on finite sampling without replacement.</p> <pre><code>neighborhoods = risk.load_neighborhoods_by_hypergeom(\n    network=network,\n    annotations=annotations,\n    distance_metric=\"louvain\",\n    louvain_resolution=10.0,\n    fraction_shortest_edges=0.275,\n    null_distribution=\"network\",\n    random_seed=887,\n)\n</code></pre>"},{"location":"4_statistics/#3-binomial-test","title":"3. Binomial Test","text":"<p>Models binary outcomes assuming independent trials.</p> <pre><code>neighborhoods = risk.load_neighborhoods_by_binom(\n    network=network,\n    annotations=annotations,\n    distance_metric=\"louvain\",\n    louvain_resolution=10.0,\n    fraction_shortest_edges=0.275,\n    null_distribution=\"network\",\n    random_seed=887,\n)\n</code></pre>"},{"location":"4_statistics/#4-chi-squared-test","title":"4. Chi-squared Test","text":"<p>Tests significance via contingency tables.</p> <pre><code>neighborhoods = risk.load_neighborhoods_by_chi2(\n    network=network,\n    annotations=annotations,\n    distance_metric=\"louvain\",\n    louvain_resolution=10.0,\n    fraction_shortest_edges=0.275,\n    null_distribution=\"network\",\n    random_seed=887,\n)\n</code></pre>"},{"location":"4_statistics/#5-poisson-test","title":"5. Poisson Test","text":"<p>Evaluates deviation from expected frequency under Poisson.</p> <pre><code>neighborhoods = risk.load_neighborhoods_by_poisson(\n    network=network,\n    annotations=annotations,\n    distance_metric=\"louvain\",\n    louvain_resolution=10.0,\n    fraction_shortest_edges=0.275,\n    null_distribution=\"network\",\n    random_seed=887,\n)\n</code></pre>"},{"location":"4_statistics/#6-z-score-test","title":"6. Z-score Test","text":"<p>Computes standardized overrepresentation scores for each cluster.</p> <pre><code>neighborhoods = risk.load_neighborhoods_by_zscore(\n    network=network,\n    annotations=annotations,\n    distance_metric=\"louvain\",\n    louvain_resolution=10.0,\n    fraction_shortest_edges=0.275,\n    null_distribution=\"network\",\n    random_seed=887,\n)\n</code></pre>"},{"location":"4_statistics/#output","title":"Output","text":"<p>All test functions return a <code>neighborhoods</code> dictionary with:</p> <ul> <li>Cluster IDs</li> <li>Term-wise overrepresentation scores</li> <li>Optional p-values or z-scores depending on method</li> </ul> <p>Use this result to create a <code>NetworkGraph</code> in the next step.</p>"},{"location":"4_statistics/#next-step","title":"Next Step","text":"<p>Proceed to 5. Load Graph to build a cluster-aware network object.</p>"},{"location":"5_load_graph/","title":"Creating a NetworkGraph","text":"<p>RISK generates a <code>NetworkGraph</code> object for overrepresentation-based analysis and visualization. This step integrates the network, annotations, and overrepresentation results into a cohesive structure with clustering, domain-level significance, and downstream plotting support.</p>"},{"location":"5_load_graph/#usage","title":"Usage","text":"<p>To build a <code>NetworkGraph</code>, you\u2019ll need:</p> <ul> <li>A preprocessed <code>network</code> (e.g., from <code>load_*_network()</code>)</li> <li>An <code>annotations</code> object (from <code>load_*_annotation()</code>)</li> <li>A <code>neighborhoods</code> object (from one of the overrepresentation tests)</li> </ul> <pre><code>graph = risk.load_graph(\n    network=network,\n    annotations=annotations,\n    neighborhoods=neighborhoods,\n    tail=\"right\",\n    pval_cutoff=0.05,\n    fdr_cutoff=1.00,\n    impute_depth=0,\n    prune_threshold=0.125,\n    linkage_criterion=\"distance\",\n    linkage_method=\"single\",\n    linkage_metric=\"jaccard\",\n    linkage_threshold=\"auto\",\n    min_cluster_size=6,\n    max_cluster_size=1_000,\n)\n</code></pre>"},{"location":"5_load_graph/#parameters","title":"Parameters","text":"Parameter Description <code>network</code> A preprocessed <code>network</code> <code>annotations</code> An <code>annotations</code> object <code>neighborhoods</code> A <code>neighborhoods</code> object <code>tail</code> Test direction: <code>'right'</code> (default), <code>'left'</code>, or <code>'both'</code> <code>pval_cutoff</code> Raw p-value threshold (e.g., 0.01\u20130.05) <code>fdr_cutoff</code> Adjusted p-value threshold (e.g., 0.05\u20131.0) <code>impute_depth</code> Hop depth for stratified overrepresentation imputation <code>prune_threshold</code> Prune distant nodes from cluster layout <code>linkage_criterion</code> <code>'distance'</code>, <code>'maxclust'</code>, or <code>'off'</code> <code>linkage_method</code> <code>'single'</code>, <code>'average'</code>, <code>'auto'</code>, etc. <code>linkage_metric</code> <code>'jaccard'</code>, <code>'cosine'</code>, <code>'auto'</code>, etc. <code>linkage_threshold</code> Float (0\u20131) or <code>'auto'</code> for optimization <code>min_cluster_size</code> Minimum size for functional domains (clusters) <code>max_cluster_size</code> Maximum size for functional domains"},{"location":"5_load_graph/#key-attributes","title":"Key Attributes","text":"<p>After creation, the <code>NetworkGraph</code> object contains cluster- and node-level mappings:</p>"},{"location":"5_load_graph/#domain-level","title":"Domain-Level","text":"<ul> <li><code>domain_id_to_node_ids_map</code></li> <li><code>domain_id_to_node_labels_map</code></li> <li><code>domain_id_to_domain_terms_map</code></li> <li><code>domain_id_to_domain_info_map</code></li> </ul>"},{"location":"5_load_graph/#node-level","title":"Node-Level","text":"<ul> <li><code>node_id_to_node_label_map</code></li> <li><code>node_label_to_node_id_map</code></li> <li><code>node_label_to_significance_map</code></li> <li><code>node_significance_sums</code></li> </ul> <p>These mappings drive all visualization, labeling, and export methods.</p>"},{"location":"5_load_graph/#analysis-summary","title":"Analysis Summary","text":"<p>You can extract the analysis results using <code>.summary.load()</code>:</p> <pre><code>summary_df = graph.summary.load()\nsummary_df.head()\n</code></pre> <p>Export formats:</p> <pre><code>graph.summary.to_csv(\"./data/csv/summary/michaelis_2023.csv\")\ngraph.summary.to_json(\"./data/json/summary/michaelis_2023.json\")\ngraph.summary.to_txt(\"./data/txt/summary/michaelis_2023.txt\")\n</code></pre>"},{"location":"5_load_graph/#cleaning-domains","title":"Cleaning Domains","text":"<p>Use <code>.pop()</code> to remove a domain from all internal structures:</p> <pre><code>graph.pop(1)\n</code></pre>"},{"location":"5_load_graph/#next-step","title":"Next Step","text":"<p>Proceed to 6. Visualization to plot overrepresented clusters and explore domain layout.</p>"},{"location":"6_visualization/","title":"Visualization","text":"<p>RISK provides a flexible and powerful plotting interface via the <code>NetworkPlotter</code> object. This enables generation of publication-ready figures with detailed domain annotations, significance-driven coloring, KDE-based contours, and rich label customization.</p>"},{"location":"6_visualization/#create-a-plotter","title":"Create a Plotter","text":"<p>You must first load your <code>NetworkGraph</code> object into a <code>NetworkPlotter</code>.</p> <pre><code>plotter = risk.load_plotter(\n    graph=graph,\n    figsize=(15, 15),\n    background_color=\"black\",\n    background_alpha=1.0,\n    pad=0.3,\n)\n</code></pre>"},{"location":"6_visualization/#core-plotting-methods","title":"Core Plotting Methods","text":"<p>The following methods control different aspects of the visualization:</p> Method Purpose <code>plot_title()</code> Add a title and subtitle overlay in the center of the network <code>plot_circle_perimeter()</code> Draw a circular boundary around the network layout for visual framing <code>plot_contour_perimeter()</code> Draw a KDE-based contour around the entire network layout perimeter <code>plot_network()</code> Render nodes and edges based on statistical significance, using size and color to reflect overrepresentation <code>plot_subnetwork()</code> Highlight a selected group of nodes in a different style (e.g., metabolic vs. ribosomal) <code>plot_contours()</code> Draw shaded KDE contours around clustered domains (e.g., GO term regions) <code>plot_subcontour()</code> Draw a KDE contour around a specific list of nodes or a small subgraph <code>plot_labels()</code> Automatically generate text labels and arrows for each domain or functional region <code>plot_sublabel()</code> Manually add a label and arrow for a user-defined node set <code>savefig()</code> Save the current figure as a SVG, PNG, PDF, etc. <code>show()</code> Display the current plot in a notebook or interactive window <p>Many of these methods support additional customization parameters beyond the examples shown below. For a full list, use <code>help(plotter.method_name)</code> in a Python environment or refer to the in-notebook documentation.</p>"},{"location":"6_visualization/#example-core-visualization-workflow","title":"Example: Core Visualization Workflow","text":"<p>The following sequence illustrates the most commonly used core plotting methods in RISK. These can be combined to create clear, informative figures with minimal code.</p>"},{"location":"6_visualization/#add-a-title","title":"Add a Title","text":"<pre><code>plotter.plot_title(\n    title=\"Yeast Genetic Interaction Network\",\n    subtitle=\"Colored by Overrepresentation Score\",\n    fontcolor=\"white\",\n    fontsize=20,\n    subtitle_color=\"white\",\n)\n</code></pre>"},{"location":"6_visualization/#draw-a-circle-perimeter","title":"Draw a Circle Perimeter","text":"<pre><code>plotter.plot_circle_perimeter(\n    radius=1.0,\n    color=\"white\",\n    linewidth=2.0,\n    linestyle=\"solid\",\n    alpha=1.0,\n)\n</code></pre> <p>For a more flexible KDE-based layout boundary, see <code>plot_contour_perimeter()</code>.</p>"},{"location":"6_visualization/#plot-the-annotated-network","title":"Plot the Annotated Network","text":"<p>The <code>plot_network()</code> method draws the full network similarly to networkx.draw, but with enhanced styling and layout control. It is the primary way to visualize domain-level significance on the graph.</p> <p>While <code>plot_network()</code> can be used as-is, RISK provides helper functions such as <code>get_annotated_node_sizes()</code> and <code>get_annotated_node_colors()</code> to automatically generate node styles based on annotation significance. These outputs plug directly into <code>plot_network()</code>.</p> <pre><code>node_sizes = plotter.get_annotated_node_sizes(\n    significant_size=200,\n    nonsignificant_size=10,\n)\n\nnode_colors = plotter.get_annotated_node_colors(\n    cmap=\"gist_rainbow\",\n    blend_colors=False,\n    blend_gamma=2.2,\n    min_scale=0.8,\n    max_scale=1.0,\n    scale_factor=0.5,\n    alpha=1.0,\n    nonsignificant_color=\"white\",\n    nonsignificant_alpha=0.75,\n    random_seed=888,\n)\n\nplotter.plot_network(\n    node_size=node_sizes,\n    node_color=node_colors,\n    node_shape=\"o\",\n    node_edgewidth=1.0,\n    edge_width=0.04,\n    node_edgecolor=\"black\",\n    edge_color=\"white\",\n    node_alpha=1.0,\n    edge_alpha=1.0,\n)\n</code></pre> <p>You can also use <code>plotter.get_annotated_contour_colors()</code> and <code>plotter.get_annotated_label_colors()</code> for consistent domain-based color themes across contours and labels.</p>"},{"location":"6_visualization/#highlight-a-subnetwork","title":"Highlight a Subnetwork","text":"<p>Use <code>plot_subnetwork()</code> to overlay a custom set of nodes with distinct styling\u2014useful for emphasizing known complexes or pathway members.</p> <pre><code>plotter.plot_subnetwork(\n    nodes=[\"RPL1A\", \"RPL2B\", \"RPL3\", \"RPL5\"],\n    color=\"white\",\n    size=220,\n    alpha=0.8,\n)\n</code></pre>"},{"location":"6_visualization/#domain-overlays-with-kde-contours","title":"Domain Overlays with KDE Contours","text":"<p>You can highlight functionally overrepresented domains using KDE-based contours.</p>"},{"location":"6_visualization/#all-domains","title":"All domains:","text":"<pre><code>plotter.plot_contours(\n    levels=5,\n    bandwidth=0.8,\n    grid_size=250,\n    color=plotter.get_annotated_contour_colors(...),\n    linestyle=\"solid\",\n    linewidth=2.0,\n    alpha=1.0,\n    fill_alpha=0.25,\n)\n</code></pre>"},{"location":"6_visualization/#subsets-of-interest","title":"Subsets of interest:","text":"<pre><code>plotter.plot_subcontour(\n    nodes=[\"LSM1\", \"LSM2\", \"LSM3\", \"PAT1\"],\n    color=\"white\",\n    levels=5,\n    fill_alpha=0.25,\n)\n</code></pre>"},{"location":"6_visualization/#domain-labels-and-arrows","title":"Domain Labels and Arrows","text":""},{"location":"6_visualization/#label-all-domains","title":"Label all domains","text":"<pre><code>plotter.plot_labels(\n    font=\"Arial\",\n    fontsize=15,\n    fontcase={\"title\": \"lower\"},\n    fontcolor=\"white\",\n    fontalpha=1.0,\n    arrow_color=plotter.get_annotated_label_colors(...),\n    arrow_style=\"-\",\n    arrow_alpha=1.0,\n    max_labels=28,\n    min_label_lines=3,\n    max_label_lines=4,\n    min_chars_per_line=3,\n    max_chars_per_line=12,\n    words_to_omit=[\"from\", \"the\", \"into\", \"via\", \"process\"],\n)\n</code></pre>"},{"location":"6_visualization/#add-a-custom-label","title":"Add a custom label","text":"<pre><code>plotter.plot_sublabel(\n    nodes=[\"LSM1\", \"LSM2\", \"PAT1\"],\n    label=\"LSM1-7-PAT1 Complex\",\n    radial_position=73,\n    scale=1.6,\n    offset=0.12,\n    fontcolor=\"white\",\n    fontsize=15,\n)\n</code></pre>"},{"location":"6_visualization/#export-and-display","title":"Export and Display","text":""},{"location":"6_visualization/#save-your-figure","title":"Save your figure","text":"<pre><code>plotter.savefig(\"my_plot.png\", dpi=300)\n</code></pre>"},{"location":"6_visualization/#display-the-figure-in-a-notebookscript","title":"Display the figure in a notebook/script","text":"<pre><code>plotter.show()\n</code></pre>"},{"location":"6_visualization/#next-step","title":"Next Step","text":"<p>You\u2019re now ready to export your results or continue exploring 7. Advanced Plotting features like background layers, dynamic coloring, and multi-panel layouts.</p>"},{"location":"7_advanced_plotting/","title":"Advanced Plotting","text":"<p>Once you\u2019re familiar with RISK\u2019s core plotting methods, you can start layering annotations, subnetworks, and styles to highlight specific biological themes. This section walks through advanced features using a real-world example.</p>"},{"location":"7_advanced_plotting/#use-case-dual-overlay-of-coexpression-subgroups","title":"Use Case: Dual Overlay of Coexpression Subgroups","text":"<p>In this example, we highlight two functionally distinct sets of genes:</p> <ul> <li>Highly coexpressed nodes</li> <li>Weakly coexpressed nodes</li> </ul> <p>We annotate each with a distinct color and size overlay, draw the global network structure, and apply clear labeling for biological interpretation.</p>"},{"location":"7_advanced_plotting/#step-1-define-your-subgroups","title":"Step 1: Define Your Subgroups","text":"<p>Use lists of node names to define subgroups of interest.</p> <pre><code>high_coexpression_nodes = [\"RPL1A\", \"RPL2B\", \"RPL3\", \"RPL5\"]\nlow_coexpression_nodes = [\"YGR103W\", \"YDL064W\", \"YML082W\", \"YOR204W\"]\n</code></pre>"},{"location":"7_advanced_plotting/#step-2-initialize-the-plotter","title":"Step 2: Initialize the Plotter","text":"<p>Before plotting, ensure that the <code>graph</code> object has been instantiated. This should be the same <code>NetworkGraph</code> object created during the setup in the Load Graph section. The <code>graph</code> instance provides the structural and annotation context necessary for visual overlays such as coexpression subnetworks or GO BP contours.</p> <p>We create a new <code>NetworkPlotter</code> instance and set background preferences.</p> <pre><code>plotter = risk.load_plotter(\n    graph=graph,\n    figsize=(16, 16),\n    background_color=\"black\",\n    background_alpha=1.0,\n    pad=0.3,\n)\n</code></pre>"},{"location":"7_advanced_plotting/#step-3-draw-the-full-network-and-frame","title":"Step 3: Draw the Full Network and Frame","text":"<pre><code>plotter.plot_circle_perimeter(\n    radius=1.0,\n    color=\"white\",\n    linewidth=2.0,\n    linestyle=\"solid\",\n    alpha=1.0,\n)\n\nplotter.plot_network(\n    node_colors=plotter.get_annotated_node_colors(),\n    node_sizes=plotter.get_annotated_node_sizes(),\n)\n</code></pre>"},{"location":"7_advanced_plotting/#step-4-highlight-subnetworks","title":"Step 4: Highlight Subnetworks","text":"<p>Overlay the high and low coexpression groups in distinct styles.</p> <pre><code>plotter.plot_subnetwork(\n    nodes=high_coexpression_nodes,\n    color=\"lime\",\n    size=225,\n    alpha=1.0,\n)\n\nplotter.plot_subnetwork(\n    nodes=low_coexpression_nodes,\n    color=\"magenta\",\n    size=225,\n    alpha=1.0,\n)\n</code></pre>"},{"location":"7_advanced_plotting/#step-5-add-kde-domain-contours","title":"Step 5: Add KDE Domain Contours","text":"<p>Highlight overrepresented domains from <code>graph</code> using KDE-based clustering.</p> <pre><code>plotter.plot_contours(\n    levels=5,\n    grid_size=250,\n    color=plotter.get_annotated_contour_colors(),\n    alpha=1.0,\n    fill_alpha=0.25,\n)\n</code></pre>"},{"location":"7_advanced_plotting/#step-6-annotate-regions-with-sublabels","title":"Step 6: Annotate Regions with Sublabels","text":"<p>Draw manual labels and arrows pointing to desired subnetwork regions.</p> <pre><code>plotter.plot_sublabel(\n    nodes=high_coexpression_nodes,\n    label=\"High Coexpression (Ribosomal)\",\n    radial_position=45,\n    scale=1.8,\n    offset=0.12,\n    fontcolor=\"lime\",\n    fontsize=16,\n)\n\nplotter.plot_sublabel(\n    nodes=low_coexpression_nodes,\n    label=\"Low Coexpression (Metabolic)\",\n    radial_position=190,\n    scale=1.8,\n    offset=0.12,\n    fontcolor=\"magenta\",\n    fontsize=16,\n)\n</code></pre>"},{"location":"7_advanced_plotting/#use-case-highlighting-party-hubs-and-date-hubs","title":"Use Case: Highlighting Party Hubs and Date Hubs","text":"<p>In this advanced example, we visualize party hubs and date hubs based on coexpression scores from the SPELL database. We use precomputed color mappings for each subgroup and annotate regions of the network linked to ribosomal and metabolic functions.</p>"},{"location":"7_advanced_plotting/#step-1-load-and-plot-colored-subnetworks","title":"Step 1: Load and Plot Colored Subnetworks","text":"<pre><code>import json\n\ndef load_json_to_dict(filepath):\n    with open(filepath, \"r\") as file:\n        return json.load(file)\n\nhigh_rgba = load_json_to_dict(\"./data/json/coexpression/high_coexpression_michaelis_2023.json\")\nlow_rgba = load_json_to_dict(\"./data/json/coexpression/low_coexpression_michaelis_2023.json\")\n\nhigh_nodes, high_colors = zip(*high_rgba.items())\nlow_nodes, low_colors = zip(*low_rgba.items())\n\nplotter = risk.load_plotter(graph=graph, figsize=(15, 15), background_color=\"black\")\n\nplotter.plot_subnetwork(nodes=high_nodes, node_size=1500, node_color=high_colors, edge_width=0)\nplotter.plot_subnetwork(nodes=low_nodes, node_size=1500, node_color=low_colors, edge_width=0)\nplotter.plot_contours(color=\"white\", alpha=0.75, linewidth=2.5)\n</code></pre>"},{"location":"7_advanced_plotting/#step-2-annotate-ribosomal-and-metabolic-domains","title":"Step 2: Annotate Ribosomal and Metabolic Domains","text":"<p>Use domain IDs (discovered via <code>plot_labels(overlay_ids=True)</code>) to retrieve node labels for key pathways.</p> <pre><code>def get_labels(domain_ids):\n    if not isinstance(domain_ids, (list, tuple)):\n        domain_ids = [domain_ids]\n    return sum([graph.domain_id_to_node_labels_map[d] for d in domain_ids], [])\n\n# Note: These domain IDs are based on a specific random seed. They may differ if layout or clustering is reinitialized.\nribosome_nodes = get_labels([69, 72, 28, 79])\n\n# Domain IDs for metabolic processes; adjust as needed if using a different seed or graph instance.\nmetabolism_nodes = get_labels([16, 18, 41, 99])\n\nplotter.plot_sublabel(nodes=ribosome_nodes, label=\"Ribosomal\\nProcesses\", radial_position=240)\nplotter.plot_sublabel(nodes=metabolism_nodes, label=\"Metabolic\\nProcesses\", radial_position=60)\nplotter.show()\n</code></pre> <p>This overlay highlights the spatial and functional separation of coexpression-based hub classes in the yeast PPI network.</p>"},{"location":"7_advanced_plotting/#final-output","title":"Final Output","text":"<p>Display or save the composite figure.</p> <pre><code>plotter.savefig(\"advanced_plot.png\", dpi=300)\nplotter.show()\n</code></pre> <p></p>"},{"location":"7_advanced_plotting/#recap-what-you-learned","title":"Recap: What You Learned","text":"<ul> <li>How to highlight custom biological subgroups</li> <li>How to blend annotation significance with custom overlays</li> <li>How to label specific domains using radial positioning</li> <li>How to layer multiple visual features for storytelling</li> </ul>"},{"location":"7_advanced_plotting/#next-step","title":"Next Step","text":"<p>Explore example notebooks or 8. Parameters for a complete list of available options.</p>"},{"location":"8_parameters/","title":"Overview of <code>risk.params</code>","text":"<p>The <code>risk.params</code> module (accessed via an initialized RISK instance) lets you inspect and export the internal configuration used in your RISK analysis. This supports reproducibility by preserving parameter states across formats. Note: reloading a RISK instance from a parameter file is not currently supported.</p>"},{"location":"8_parameters/#loading-parameters","title":"Loading Parameters","text":"<p>Use the <code>load()</code> method to import the current parameter dictionary.</p>"},{"location":"8_parameters/#example","title":"Example","text":"<pre><code>loaded_params = risk.params.load()\nloaded_params\n</code></pre> <p>Returns:</p> <ul> <li><code>dict</code>: Dictionary of configuration options used during analysis</li> </ul> <p>The printed dictionary contains configuration blocks used throughout the RISK pipeline, including:</p> <ul> <li><code>annotations</code>: Metadata for understanding the context of the analysis</li> <li><code>datetime</code>: Timestamp indicating when the parameters were created or last modified</li> <li><code>graph</code>: Configuration settings related to the graph structure used in the analysis</li> <li><code>neighborhoods</code>: Parameters defining the neighborhoods within the graph</li> <li><code>network</code>: Settings pertaining to the overall network configuration</li> <li><code>plotter</code>: Options for visualizing the results of the analysis</li> </ul>"},{"location":"8_parameters/#export-parameters","title":"Export Parameters","text":""},{"location":"8_parameters/#1-export-to-csv","title":"1. Export to CSV","text":"<p>Exports the parameter dictionary to a <code>.csv</code> file.</p> <pre><code>risk.params.to_csv(filepath=\"./data/csv/params/michaelis_2023.csv\")\n</code></pre>"},{"location":"8_parameters/#2-export-to-json","title":"2. Export to JSON","text":"<p>Exports parameters with nested structure preserved.</p> <pre><code>risk.params.to_json(filepath=\"./data/json/params/michaelis_2023.json\")\n</code></pre>"},{"location":"8_parameters/#3-export-to-text","title":"3. Export to Text","text":"<p>Outputs the parameter dictionary as a formatted <code>.txt</code> file.</p> <pre><code>risk.params.to_txt(filepath=\"./data/txt/params/michaelis_2023.txt\")\n</code></pre> <p>These export functions allow parameters to be easily shared and archived.</p> <p>For downstream processing, combine these with summary exports from:</p> <ul> <li><code>graph.summary.to_csv()</code></li> <li><code>graph.summary.to_json()</code></li> <li><code>graph.summary.to_txt()</code></li> </ul> <p>For a complete interactive example showing how these parameters fit into a full RISK analysis workflow, see quickstart.html or download the interactive version as quickstart.ipynb.</p>"}]}